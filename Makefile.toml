[env]
BITCOIND_ADDITIONAL_SLEEP_PERIOD = "500"
CARGO_MAKE_CARGO_BUILD_TEST_FLAGS = { script = ["echo ${CARGO_MAKE_CARGO_BUILD_TEST_FLAGS:-'--all'}"] }

# ###########################################################
# Override defaults tasks to allow the use of default flows #

# Overridden because: default task should be quick and default task was alias for dev-test-flow.
[tasks.default]
description = "Format, build and run the Rust tests. No clippy nor end-to-end."
workspace = false
clear = true
dependencies = [
     "format",
     "fix-ts",
     "build",
     "test"
]

# Overridden because: added dependencies
[tasks.pre-build]
workspace = false
dependencies = [
    "check-rs-format",
    "check-ts",
    "check-cargo-toml-format",
    "clippy"
]

# Overridden because: specified dependencies
[tasks.post-test]
workspace = false
dependencies = [
    "api",
]

# Overridden because: added workspace
[tasks.ci-flow]
workspace = false

# Overridden because: we want workspace = false
[tasks.build]
workspace = false

# Overridden because: we want workspace = false
[tasks.build-verbose]
workspace = false

# Overridden because: we want workspace = false
[tasks.test-verbose]
workspace = false

# Overridden because: add script
[tasks.init]
script = [
'''
git config core.hooksPath .githooks
'''
]

# Overridden because: workspace = false
[tasks.install-clippy-rustup]
workspace = false

# Overridden because: we want to fail if there are warnings (-D warn)
[tasks.clippy]
workspace = false
args = [
    "clippy",
    "--all-targets",
    "--",
    "-W", "clippy::cast_possible_truncation",
    "-W", "clippy::cast_sign_loss",
    "-W", "clippy::fallible_impl_from",
    "-W", "clippy::cast_precision_loss",
    "-W", "clippy::cast_possible_wrap",
    "-W", "clippy::print_stdout",
    "-W", "clippy::dbg_macro",
    "-D", "warnings"
]

# Overridden because: workspace = false and custom toolchain
[tasks.format]
workspace = false
toolchain = "nightly-2019-07-31"

# Overridden because: workspace = false and custom toolchain
[tasks.check-format]
workspace = false
toolchain = "nightly-2019-07-31"

################
# Task aliases #

[tasks.all]
workspace = false
extend = "dev-test-flow"

[tasks.e2e]
workspace = false
extend = "e2e-tests-flow"

[tasks.dry]
workspace = false
extend = "dry-tests-flow"

[tasks.btsieve]
workspace = false
extend = "btsieve-tests-flow"

[tasks.webgui]
workspace = false
extend = "webgui-tests-flow"

[tasks.api]
workspace = false
extend = "api-tests-flow"

################
# Custom tasks #

[tasks.check-rs-format]
alias = "check-format"

[tasks.fix-ts]
description = "Runs prettier & tslint to format TypeScript code."
workspace = false
install_script = ["(cd ./api_tests; yarn install;)"]
script = ["cd api_tests; yarn run fix"]

[tasks.check-ts]
description = "Runs tsc, prettier & tslint to validate TypeScript syntax & format."
workspace = false
install_script = ["(cd ./api_tests; yarn install;)"]
script = ["cd api_tests; yarn run check"]

[tasks.cargo-toml-format]
description = "Runs cargo tomlfmt to format Cargo.toml files."
workspace = false
install_crate = { crate_name = "cargo-tomlfmt", binary = "cargo-tomlfmt", test_arg = "--help" }
script = [
'''
find . -name Cargo.toml | xargs -n1 cargo tomlfmt -p
'''
]

[tasks.check-cargo-toml-format]
description = "Runs cargo tomlfmt to check appropriate Cargo.toml format."
workspace = false
install_crate = { crate_name = "cargo-tomlfmt", binary = "cargo-tomlfmt", test_arg = "--help" }
script = [
'''
find . -name Cargo.toml | xargs -n1 cargo tomlfmt -d -p
'''
]

[tasks.ci]
workspace = false
run_task = "ci-flow"

#############
# api Tests #
[tasks.pre-api-tests]
description = "Install/build dependencies for api tests"
workspace = false
private = true
script = [ "( cd ./api_tests && yarn install;)" ]

#####################
# Dry api Test flow #
[tasks.dry-tests-flow]
description = "Defines the dry tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "dry-tests"
]

[tasks.dry-tests]
description = "Runs tests that don't require any external services"
workspace = false
private = true
script = ['cd api_tests; yarn run test ./dry/*']

#########################
# Web GUI api Test flow #
[tasks.webgui-tests-flow]
description = "Defines the web GUI tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "webgui-tests"
]

[tasks.webgui-tests]
description = "Runs tests to ensure that cnd serves comit-i"
workspace = false
private = true
script = [
"cd ./api_tests; yarn run test ./webgui/*"]

#################
# E2E Test flow #
[tasks.e2e-tests-flow]
description = "Defines the E2E-tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "e2e-tests",
]

[tasks.e2e-tests]
# Usage: `cargo make e2e <folder>` folder can be:
# - empty (run all tests)
# - btc_eth or btc_eth-erc20 or *erc20
description = "Runs RFC003 end-to-end tests specified on command line. Supports GLOB."
workspace = false
private = true
install_script = ["(cd ./api_tests; yarn install;)"]
script_runner = "bash"
script = [
'''
cd ./api_tests;
glob="${1:-*}";
for dir in e2e/rfc003/$glob; do
    add_test_files=$(ls "$dir/"*.ts 2>/dev/null|| true);
    if test "$add_test_files"; then
        files="$files $add_test_files"
    fi
done;

yarn run test $files;
'''
]

######################################
# btsieve API Test flow #
[tasks.btsieve-tests-flow]
description = "Defines the btsieve API tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "btsieve-tests",
]

[tasks.btsieve-tests]
description = "Runs btsieve API tests."
workspace = false
private = true
install_script = ["(cd ./api_tests; yarn install;)"]
script = ["cd ./api_tests; yarn run test btsieve"]

######################################
# all API Tests flow #
[tasks.api-tests-flow]
description = "Defines all API tests flow."
workspace = false
dependencies = [
    "build",
    "pre-api-tests",
    "api-tests",
]

[tasks.api-tests]
description = "Runs all API tests."
workspace = false
private = true
install_script = ["(cd ./api_tests; yarn install;)"]
script = ["cd ./api_tests; yarn run test"]
